#+TITLE: Readme
#+STARTUP:  overview
# Local Variables:
# line-spacing: 0.2
# End:

* Overview

[[file:docs/figures/NEO-6M.png]]

This repository contains a Linux library to interface with the popular [[https://www.u-blox.com/en/product/neo-6-series][Neo6m]] GPS module. The intended target is the Raspberry pi board running Rasbian Linux, but I see no reason why this would not compile and run on other hardware provided it is running a Linux OS and has a place to connect a UART device. This is *not* designed to run on bare metal since it fundamentally relies on Linux OS calls.

This work was created as part of a larger university project to create a mobile pollution sensor which can be found in this repository, however I have chosen to split the GPS library off into it's own Repository to make it easier to reuse by myself and others. Though the pollution sensor work was a group effort all work on the GPS driver (and thus this repo) is my own.

* Quick-start
** 1. Either download, clone or add the repository as a sub-module
#+begin_src shell
git clone https://github.com/BenjaminFrazer/libNeo6M
#+end_src
Or
#+begin_src shell
git submodule add https://github.com/BenjaminFrazer/libNeo6M
#+end_src
** 2. Download the dependencies
   On Raspbery pi:
#+begin_src shell
sudo apt-get make
sudo apt-get cmake
sudo apt-get boost
#+end_src
  On arch Linux:
#+begin_src shell
sudo pacman -S boost
sudo pacman -S make
sudo pacman -S cmake
#+end_src
** 3. Build and compile the project (assumes you are currently in the project root):
#+begin_src shell
cmake -B build . # create a build tree in the build dir
cd build #change to the build directory
make # compile the project
#+end_src
** 4. Run tests
#+begin_src shell
ctest
#+end_src

* Usage
This repository will compile as a static library (a =.a= file) which you can use in conjunction with it's public headers (under =/include= ) to incorporate it with your own project.
** CMake
*** 1. Add this repo as a sub-module
#+begin_src shell
git submodule add
#+end_src
*** 2. add the sub-module directory from your top-level =CMakeLists.txt=
#+begin_src shell
include_directories(external/libNeo6M)
#+end_src
*** 3. Set =libNeo6m= as a link target for your desired targets in your target's =CMakeLists.txt=
#+begin_src shell
target_link_libraries(<your_target> <[PRIVATE|PUBLIC]> libNeo6m)
#+end_src

* Wiring guide
** Raspberry Pi 4
UART pins are on 14 & 15 respectively, so simply connect the Neo6m tx to the rx of the Pi (pin 15). You don't need to connect the Neo6m's rx pin AFAIK since we don't need to send anything to it.
[[file:docs/figures/Raspberry-Pi-GPIO-Header-with-Photo-702x336.png]]

* Library Implementation
The GPS module communicates over a UART connection according to the NMEA 0183 protocol (see [[https://en.wikipedia.org/wiki/NMEA_0183][here]] for more). This consists of a standardised set of 'sentences' each containing particular data in a standardises syntax. When connected viia UART, The Neo6m will simply spit out these sentences \approx every second or so. Since Linux has a build in UART kernel module, the connected GPS should appear as a new device under the =/dev= directory. Data is simply extracted by doing a blocking ~read()~ on this device. According to the NMEA standard, each 'sentence' is terminated with the carriage return character meaning that we can set up the file read to block until the carriage return character is encountered. Thus each ~read()~ should return a single full sentence.

Since the library fundamentally depends on events external to the program it is implemented a-synchronously using a callback based system. The user must implement a function that will be called every time new data is received. This is done by inheriting from the base Neo6m class and implementing the virtual function ~void hasMeasurementCB(neo6mMeasurment thisMesurement)~. The example program under =/examples= should make this clear.
